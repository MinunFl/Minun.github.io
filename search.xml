<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>滴滴凉经</title>
      <link href="2021/03/28/di-di-liang-jing/"/>
      <url>2021/03/28/di-di-liang-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="滴滴一面"><a href="#滴滴一面" class="headerlink" title="滴滴一面"></a>滴滴一面</h1><ul><li>说下c++的内存泄露管理</li><li>说一下常用的STL，以及优缺点</li><li>unordered_map 使用什么数据结构实现的</li><li>指针和引用的区别</li><li>传参时指针和引用如何选择</li><li>宏和内联函数的区别</li><li>c++设计模式用过什么</li><li>c++多线程</li><li>hashmap是线程安全的吗</li><li>类编程，模板编程写过吗？</li><li>说一下TCP通信三次握手 四次挥手</li><li>为什么挥手要4次</li><li>TCP拥塞控制说一下</li><li>说一下你了解的kafka</li><li>消息队列用处</li><li>phoenix和Hbase关系</li><li>Phoenix是如何加索引的</li><li>算法：<ul><li>n个就很长的数组求交集和并集</li></ul></li></ul><p>直接挂，效率很快，我很喜欢</p>]]></content>
      
      
      <categories>
          
          <category> 春招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团凉面</title>
      <link href="2021/03/26/mei-tuan-liang-mian/"/>
      <url>2021/03/26/mei-tuan-liang-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="美团一面"><a href="#美团一面" class="headerlink" title="美团一面"></a>美团一面</h1><ul><li>自我介绍</li><li>tcp为什么是三次握手</li><li>说说你的项目</li><li>知道kafka，说一下 （一点</li><li>kafka不会不丢失消息</li><li>学过那些语言，只要用什么</li><li>java hashmap说一下 ）不懂</li><li>java python c++你觉得区别是什么，各自优缺点</li><li>为什么java可以可以移植性好</li><li>那c呢？（不知道</li><li>进程与线程区别</li><li>数据库索引是什么数据结构</li><li>为什么是b+树，和b树优势</li><li>你的项目该怎么建索引</li><li>你项目数据库是怎么存的</li><li>数据库的隔离级别，介绍一下</li><li>为什么有可重复读还要有串行化，区别</li><li>幻读是什么</li><li>最近读什么书</li><li>读书收获</li><li>c++线程加锁，mutex，源码怎么实现</li><li>一个先增后减的数组，找最大值</li><li>一个乱序数组，保证每个数都出现2次，拿走一个，求拿走的数</li><li>拿走2个，保证拿走不同的数</li><li>回问<ul><li>算法题表现如何（一般，没有想象中高效</li><li>拿两个怎么做（三次异或</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯凉面</title>
      <link href="2021/03/24/teng-xun-liang-mian/"/>
      <url>2021/03/24/teng-xun-liang-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="wxg一面"><a href="#wxg一面" class="headerlink" title="wxg一面"></a>wxg一面</h1><ul><li>三次握手<ul><li>过程</li><li>syn是什么</li><li>seq怎么取值 为什么？</li></ul></li><li>写过socket编程吗？</li><li>学过数据库和os？</li><li>进程和线程一些</li><li>进程有哪些资源？</li><li>谷歌不同页面是进程线程？为什么</li><li>主从备份知道吗？</li><li>map order_map 区别</li><li>哈希冲突解决</li><li>拉链发要存什么信息？</li><li>了解携程吗？</li></ul><p>凉凉</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节凉面</title>
      <link href="2021/03/24/zi-jie-liang-mian/"/>
      <url>2021/03/24/zi-jie-liang-mian/</url>
      
        <content type="html"><![CDATA[<p>#字节一面</p><ul><li>算法题：在一个连续区间使得其值等于target，使得区间长度最大（一开始给的转变的其他题意，写了3个方案）</li><li>介绍一下虚拟内存</li><li>页面置换实现？</li><li>sql题（不会）<ul><li>给一个表，每个人有成绩和科目</li><li>查询出每个人最高成绩的科目<br>打了不会就结束了…..直接开始下一家</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL结构框架-一条SQL查询语句是如何执行的</title>
      <link href="2021/03/01/mysql-jie-gou-kuang-jia-yi-tiao-sql-cha-xun-yu-ju-shi-ru-he-zhi-xing-de/"/>
      <url>2021/03/01/mysql-jie-gou-kuang-jia-yi-tiao-sql-cha-xun-yu-ju-shi-ru-he-zhi-xing-de/</url>
      
        <content type="html"><![CDATA[<h1 id="一条SQL查询语句是如何执行的"><a href="#一条SQL查询语句是如何执行的" class="headerlink" title="一条SQL查询语句是如何执行的"></a>一条SQL查询语句是如何执行的</h1><p><img src="/images/mysql_01.png" alt="MYSQL结构框架"></p><p>MySQL可以分为server层和存储引擎层两部分</p><ul><li>server层包括连接器、查询缓存、分析器、优化器、执行器、MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</li><li>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。</li><li>不同的存储引擎公用i一个server层</li></ul><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><ul><li><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接完成后，如果你没有后续的动作，这个连接就处于空闲状态。</p></li><li><p>你可以在show processlist命令中看到它。客户端如果太长时间没动静，连接器就会自动将它断开。</p></li><li><p>长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2></li><li><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。如果你的查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客户端。</p></li><li><p>不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。</p></li><li><p>不建议开启查询缓存，查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2></li><li><p>分析器先会做“词法分析”,词法分析完后就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2></li><li><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2></li><li><p>开始执行的时候，要先判断一下你对这个表T有没有执行查询的权限，如果没有，就会返回没有权限的错误</p></li><li><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口</p></li></ul><p>一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
